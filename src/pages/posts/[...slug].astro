---
import { getDesc, getTitle } from "../../utils";
import { siteConfig } from "../../config";
import Badge from "../../components/Badge.astro";
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import PageLayout from "../../layouts/PageLayout.astro";

export async function getStaticPaths() {
    const posts = await getCollection("posts", ({ data }) => {
        return import.meta.env.PROD ? data.isDraft !== true : true;
    });
    return posts.map((post) => ({
        params: { slug: post.id },
        props: { post },
    }));
}

interface Props {
    post: CollectionEntry<"posts">;
}

const { post } = Astro.props;
const { data } = post;
const { Content, headings, remarkPluginFrontmatter } = await render(post);
const haveToc = headings.some(
    (heading) => heading.depth === 2 || heading.depth === 3,
);

// 工具函数：安全解析日期并处理时区
const formatDate = (dateString) => {
  const date = new Date(dateString);
  
  // 检查日期是否有效
  if (isNaN(date.getTime())) {
    return '日期解析错误';
  }
  
  // 格式化日期，指定时区和格式
  return date.toLocaleDateString(siteConfig.language, {
    timeZone: 'Asia/Shanghai', // 根据你的服务器/用户位置调整
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    // 可选：添加时间显示
    // hour: '2-digit',
    // minute: '2-digit',
  });
};
---

<PageLayout
    comments={true}
    title={getTitle(data.title)}
    description={getDesc(data.description)}
>
    <div class="flex items-start">
        {
            haveToc && (
                <aside class="basis-[16rem] shrink-0 max-md:hidden sticky top-20 mr-4 bg-base transition-all rounded-xl p-2">
                    <ul>
                        {headings.map((heading) => {
                            switch (heading.depth) {
                                case 2:
                                    return (
                                        <li>
                                            <a
                                                class="px-2 menu-item"
                                                href={`#${heading.slug}`}
                                            >
                                                {heading.text}
                                            </a>
                                        </li>
                                    );
                                case 3:
                                    return (
                                        <li>
                                            <a
                                                class="pl-6 pr-2 menu-item"
                                                href={`#${heading.slug}`}
                                            >
                                                {heading.text}
                                            </a>
                                        </li>
                                    );
                            }
                        })}
                    </ul>
                </aside>
            )
        }

        <article class="article base-card grow" data-pagefind-body>
            <h1 id={data.title}>{data.title}</h1>

            <div class="flex space-x-4 not-prose">
                <!-- 发布日期 -->
                <Badge icon="material-symbols:calendar-month-rounded">
                    {
                        new Date(remarkPluginFrontmatter.pubDate).toLocaleDateString(
                            siteConfig.language,
                        )
                    }
                </Badge>

                <!-- 修改日期 -->
                <Badge icon="material-symbols:edit-calendar-rounded">
                    {
                        new Date(remarkPluginFrontmatter.lastModified).toLocaleDateString(
                            siteConfig.language,
                        )
                    }
                </Badge>

                {
                    siteConfig.twikoo_uri && (
                        <Badge icon="material-symbols:bar-chart-rounded">
                            <span id="twikoo_visitors">...</span>
                        </Badge>
                    )
                }
            </div>

            <Content />
        </article>
    </div>
</PageLayout>

<script>
    import { debounce } from "../../utils";

    const links = document.querySelectorAll(".menu-item");
    const handler = debounce(() => {
        for (const link of links) {
            const href = link.getAttribute("href") as string;
            const target = document.querySelector(`[id="${href.slice(1)}"]`);
            if (target) {
                const offsetTop = target.getBoundingClientRect().top - 128;
                if (offsetTop <= 0) {
                    links.forEach((link) => link.classList.remove("bg-hover"));
                    link.classList.add("bg-hover");
                    history.replaceState(null, "", href);
                }
            }
        }
    });
    document.addEventListener("scroll", handler);
    document.addEventListener("DOMContentLoaded", handler);
</script>
